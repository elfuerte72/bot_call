from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from models.states import ClientEditingStates, MealPlanStates
from keyboards.dialog_keyboards import get_client_actions_keyboard, get_confirm_keyboard, get_cancel_keyboard
from keyboards.main_menu import get_main_menu
from database.db_handlers import get_clients, get_client_by_id, delete_client

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"
@router.message(F.text == "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
async def cmd_client_list(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    clients = await get_clients()

    if not clients:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞. "
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–∏.",
            reply_markup=get_main_menu()
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    message_text = "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"

    for client in clients:
        message_text += (
            f"üë§ {client.name} (ID: {client.id})\n"
            f"üî• –ö–ë–ñ–£: {client.calories} –∫–∫–∞–ª / "
            f"–ë:{client.protein}–≥, –ñ:{client.fat}–≥, –£:{client.carbs}–≥\n"
            f"üéØ –¶–µ–ª—å: {client.goal}\n\n"
        )

    message_text += "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1)."

    await message.answer(
        message_text,
        reply_markup=get_main_menu()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID
@router.message(lambda message: message.text.isdigit())
async def show_client_details(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç—É.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID –∫–ª–∏–µ–Ω—Ç–∞
    """
    client_id = int(message.text)
    client = await get_client_by_id(client_id)

    if not client:
        await message.answer(
            f"–ö–ª–∏–µ–Ω—Ç —Å ID {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_main_menu()
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ
    message_text = (
        f"üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–ª–∏–µ–Ω—Ç—É:\n\n"
        f"üë§ –ò–º—è: {client.name}\n"
        f"üÜî ID: {client.id}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {client.age} –ª–µ—Ç\n"
        f"‚öß –ü–æ–ª: {client.gender}\n"
        f"üìè –†–æ—Å—Ç: {client.height} —Å–º\n"
        f"‚öñ –í–µ—Å: {client.weight} –∫–≥\n"
        f"üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {client.activity}\n"
        f"üéØ –¶–µ–ª—å: {client.goal}\n\n"
        f"üßÆ –ö–ë–ñ–£:\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {client.calories} –∫–∫–∞–ª\n"
        f"ü•© –ë–µ–ª–∫–∏: {client.protein} –≥\n"
        f"ü•ë –ñ–∏—Ä—ã: {client.fat} –≥\n"
        f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {client.carbs} –≥\n"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    await message.answer(
        message_text,
        reply_markup=get_client_actions_keyboard(client_id)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
@router.callback_query(F.data.startswith("edit_client:"))
async def edit_client(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
    client_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    client = await get_client_by_id(client_id)
    
    if not client:
        await callback.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.message.edit_text(
            "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=None
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(client_id=client_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # (–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª–µ–π)
    await callback.message.answer(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: {client.name}\n\n"
        f"–ü–æ–∫–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. "
        f"–û–Ω–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö."
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
@router.callback_query(F.data.startswith("delete_client:"))
async def delete_client_request(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
    client_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    client = await get_client_by_id(client_id)
    
    if not client:
        await callback.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.message.edit_text(
            "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=None
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(client_id=client_id)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    await callback.message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ '{client.name}'?\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_confirm_keyboard()
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
@router.message(F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def confirm_delete_client(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    client_id = data.get("client_id")
    
    # –ï—Å–ª–∏ ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —ç—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    if not client_id:
        return
    
    if message.text == "–î–∞":
        try:
            # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            result = await delete_client(client_id)
            if result:
                await message.answer(
                    "‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                    reply_markup=get_main_menu()
                )
            else:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=get_main_menu()
                )
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}",
                reply_markup=get_main_menu()
            )
    else:
        await message.answer(
            "–û—Ç–º–µ–Ω–µ–Ω–æ. –ö–ª–∏–µ–Ω—Ç –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_main_menu()
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å–ø–∏—Å–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"
@router.callback_query(F.data.startswith("meal_plan:"))
async def create_meal_plan(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback –∑–∞–ø—Ä–æ—Å–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
    client_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    client = await get_client_by_id(client_id)
    
    if not client:
        await callback.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.message.edit_text(
            "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=None
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ –æ –ö–ë–ñ–£ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        client_id=client_id,
        client_name=client.name,
        calories=client.calories,
        protein=client.protein,
        fat=client.fat,
        carbs=client.carbs,
        goal=client.goal
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è FSM —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    await state.set_state(MealPlanStates.waiting_for_allergies)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —É–∫–∞–∑–∞—Ç—å –∞–ª–ª–µ—Ä–≥–∏–∏
    await callback.message.answer(
        f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {client.name}\n"
        f"–ö–ë–ñ–£: {client.calories} –∫–∫–∞–ª / "
        f"–ë:{client.protein}–≥, –ñ:{client.fat}–≥, –£:{client.carbs}–≥\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ –∞–ª–ª–µ—Ä–≥–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞ –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã).\n"
        f"–ï—Å–ª–∏ –∞–ª–ª–µ—Ä–≥–∏–π –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç':",
        reply_markup=get_cancel_keyboard()
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback.answer()
