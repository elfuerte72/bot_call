from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from models.states import MealPlanStates
from keyboards.dialog_keyboards import get_cancel_keyboard, get_confirm_keyboard
from keyboards.main_menu import get_main_menu
from database.db_handlers import get_client_by_id, save_meal_plan
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
from services.meal_plan_stub import generate_meal_plan

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
router = Router()

# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ handlers/client_list.py –≤ —Ñ—É–Ω–∫—Ü–∏–∏ create_meal_plan
# –ú—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—é–¥–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å–ø–∏—Å–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞–ª–ª–µ—Ä–≥–∏–π
@router.message(MealPlanStates.waiting_for_allergies)
async def process_allergies(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–ª–ª–µ—Ä–≥–∏–π –∫–ª–∏–µ–Ω—Ç–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–ª–µ—Ä–≥–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    allergies = message.text if message.text != "–ù–µ—Ç" else ""
    await state.update_data(allergies=allergies)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    await state.set_state(MealPlanStates.waiting_for_preferences)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ –µ–¥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ –±–ª—é–¥–∞).\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç':",
        reply_markup=get_cancel_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
@router.message(MealPlanStates.waiting_for_preferences)
async def process_preferences(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    preferences = message.text if message.text != "–ù–µ—Ç" else ""
    await state.update_data(preferences=preferences)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    await state.set_state(MealPlanStates.waiting_for_limitations)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (—Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ, –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –∏ —Ç.–¥.).\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç':",
        reply_markup=get_cancel_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
@router.message(MealPlanStates.waiting_for_limitations)
async def process_limitations(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    limitations = message.text if message.text != "–ù–µ—Ç" else ""
    await state.update_data(limitations=limitations)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    message_text = (
        f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {data['client_name']}\n"
        f"üßÆ –ö–ë–ñ–£: {data['calories']} –∫–∫–∞–ª / "
        f"–ë:{data['protein']}–≥, –ñ:{data['fat']}–≥, –£:{data['carbs']}–≥\n"
        f"üéØ –¶–µ–ª—å: {data['goal']}\n\n"
    )
    
    if data.get('allergies'):
        message_text += f"‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏: {data['allergies']}\n"
    else:
        message_text += "‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏: –Ω–µ—Ç\n"
    
    if data.get('preferences'):
        message_text += f"üëç –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {data['preferences']}\n"
    else:
        message_text += "üëç –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: –Ω–µ—Ç\n"
    
    if data.get('limitations'):
        message_text += f"üö´ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {data['limitations']}\n\n"
    else:
        message_text += "üö´ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –Ω–µ—Ç\n\n"
    
    message_text += "–í—Å—ë –≤–µ—Ä–Ω–æ? –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è?"
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
    await state.set_state(MealPlanStates.waiting_for_confirmation)
    await message.answer(
        message_text,
        reply_markup=get_confirm_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
@router.message(MealPlanStates.waiting_for_confirmation, F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def process_confirmation(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    """
    if message.text == "–î–∞":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await message.answer(
            "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
            reply_markup=None
        )
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
            meal_plan = await generate_meal_plan(
                client_id=data['client_id'],
                calories=data['calories'],
                protein=data['protein'],
                fat=data['fat'],
                carbs=data['carbs'],
                goal=data['goal'],
                allergies=data.get('allergies', ''),
                preferences=data.get('preferences', ''),
                limitations=data.get('limitations', '')
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
            await message.answer(
                f"‚úÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {data['client_name']} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:\n\n{meal_plan}",
                reply_markup=get_main_menu()
            )
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
            await state.set_state(MealPlanStates.waiting_for_save)
            await state.update_data(meal_plan=meal_plan)
            await message.answer(
                "–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö?",
                reply_markup=get_confirm_keyboard()
            )
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è: {str(e)}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_menu()
            )
            await state.clear()
    else:
        await message.answer(
            "–û—Ç–º–µ–Ω–µ–Ω–æ. –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=get_main_menu()
        )
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
@router.message(MealPlanStates.waiting_for_save, F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def process_save_confirmation(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    """
    if message.text == "–î–∞":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            plan_id = await save_meal_plan(
                client_id=data['client_id'],
                content=data['meal_plan']
            )
            await message.answer(
                f"‚úÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                f"ID –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è: {plan_id}",
                reply_markup=get_main_menu()
            )
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è: {str(e)}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_menu()
            )
    else:
        await message.answer(
            "–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_main_menu()
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
