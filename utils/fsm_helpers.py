"""
–ú–æ–¥—É–ª—å —Å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FSM (–∫–æ–Ω–µ—á–Ω—ã–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∞–º–∏).
–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
"""
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from utils.validators import validate_age, validate_height, validate_weight
from typing import Any, Callable, Optional


async def process_age_input(
        message: Message, 
        state: FSMContext, 
        next_state: Any, 
        current_field: str = "age", 
        keyboard_getter: Optional[Callable] = None
    ) -> bool:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
        next_state: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        current_field: –ü–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
        keyboard_getter: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    is_valid, age_value, error_msg = validate_age(message.text)
    if not is_valid:
        await message.answer(error_msg)
        return False
        
    await state.update_data({current_field: age_value})
    await state.set_state(next_state)
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if keyboard_getter:
        keyboard = keyboard_getter()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–ª–∏–µ–Ω—Ç–∞:", 
            reply_markup=keyboard
        )
    return True


async def process_height_input(
        message: Message, 
        state: FSMContext, 
        next_state: Any, 
        current_field: str = "height", 
        keyboard_getter: Optional[Callable] = None,
        next_message: str = "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ (–∫–≥):"
    ) -> bool:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
        next_state: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        current_field: –ü–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
        keyboard_getter: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        next_message: –¢–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    is_valid, height_value, error_msg = validate_height(message.text)
    if not is_valid:
        await message.answer(error_msg)
        return False
        
    await state.update_data({current_field: height_value})
    await state.set_state(next_state)
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if keyboard_getter:
        keyboard = keyboard_getter()
        await message.answer(next_message, reply_markup=keyboard)
    else:
        await message.answer(next_message)
    return True


async def process_weight_input(
        message: Message, 
        state: FSMContext, 
        next_state: Any, 
        current_field: str = "weight", 
        keyboard_getter: Optional[Callable] = None,
        next_message: str = "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞:"
    ) -> bool:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Å–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
        next_state: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        current_field: –ü–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
        keyboard_getter: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        next_message: –¢–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    is_valid, weight_value, error_msg = validate_weight(message.text)
    if not is_valid:
        await message.answer(error_msg)
        return False
        
    await state.update_data({current_field: weight_value})
    await state.set_state(next_state)
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if keyboard_getter:
        keyboard = keyboard_getter()
        await message.answer(next_message, reply_markup=keyboard)
    else:
        await message.answer(next_message)
    return True


async def format_client_summary(data: dict, macros: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ö–ë–ñ–£.
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        macros: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞
    """
    client_info = (
        f"üìã –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data['age']} –ª–µ—Ç\n"
        f"‚öß –ü–æ–ª: {data['gender']}\n"
        f"üìè –†–æ—Å—Ç: {data['height']} —Å–º\n"
        f"‚öñ –í–µ—Å: {data['weight']} –∫–≥\n"
        f"üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['activity']}\n"
        f"üéØ –¶–µ–ª—å: {data['goal']}\n\n"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ö–ë–ñ–£
    macros_info = (
        f"üßÆ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ö–ë–ñ–£:\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {macros['calories']} –∫–∫–∞–ª\n"
        f"ü•© –ë–µ–ª–∫–∏: {macros['protein']} –≥\n"
        f"ü•ë –ñ–∏—Ä—ã: {macros['fat']} –≥\n"
        f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {macros['carbs']} –≥\n\n"
    )
    
    confirm_msg = "–í—Å—ë –≤–µ—Ä–Ω–æ? –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?"
    return client_info + macros_info + confirm_msg
