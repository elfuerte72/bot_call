"""
–ú–æ–¥—É–ª—å —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è.
–°–æ–¥–µ—Ä–∂–∏—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
"""
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional
from utils.logger import log_meal_plan, log_error


class MealPlanGenerator(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è."""
    
    @abstractmethod
    async def generate_plan(self, client_data: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            client_data: –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            str: –¢–µ–∫—Å—Ç –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
        """
        pass


class StubMealPlanGenerator(MealPlanGenerator):
    """–ó–∞–≥–ª—É—à–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    async def generate_plan(self, client_data: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è.
        
        Args:
            client_data: –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            str: –¢–µ–∫—Å—Ç –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
        """
        log_meal_plan(
            client_data['client_id'], 
            client_data['client_name'], 
            "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–∑–∞–≥–ª—É—à–∫–∞)", 
            f"–ö–ë–ñ–£: {client_data['calories']} –∫–∫–∞–ª"
        )
        
        return (
            f"üçΩ –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø –ù–ê –î–ï–ù–¨ (–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú) üçΩ\n\n"
            f"üßÆ –ö–ë–ñ–£: {client_data['calories']} –∫–∫–∞–ª / "
            f"–ë:{client_data['protein']}–≥, –ñ:{client_data['fat']}–≥, –£:{client_data['carbs']}–≥\n\n"
            f"ü•û –ó–ê–í–¢–†–ê–ö (–æ–∫–æ–ª–æ 25% –¥–Ω–µ–≤–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π):\n"
            f"- –û–≤—Å—è–Ω–∫–∞ –Ω–∞ –≤–æ–¥–µ/–º–æ–ª–æ–∫–µ - 200–≥\n"
            f"- –Ø–π—Ü–∞ - 2—à—Ç\n"
            f"- –§—Ä—É–∫—Ç—ã - 100–≥\n\n"
            f"üçé –ü–ï–†–ï–ö–£–°:\n"
            f"- –¢–≤–æ—Ä–æ–≥ 5% - 150–≥\n"
            f"- –û—Ä–µ—Ö–∏ - 20–≥\n\n"
            f"üç≤ –û–ë–ï–î (–æ–∫–æ–ª–æ 35% –¥–Ω–µ–≤–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π):\n"
            f"- –ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ - 150–≥\n"
            f"- –ë—É—Ä—ã–π —Ä–∏—Å - 100–≥\n"
            f"- –û–≤–æ—â–Ω–æ–π —Å–∞–ª–∞—Ç - 150–≥\n\n"
            f"üçå –ü–ï–†–ï–ö–£–°:\n"
            f"- –ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å - 1 –ø–æ—Ä—Ü–∏—è\n"
            f"- –ë–∞–Ω–∞–Ω - 1—à—Ç\n\n"
            f"üçó –£–ñ–ò–ù (–æ–∫–æ–ª–æ 25% –¥–Ω–µ–≤–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π):\n"
            f"- –†—ã–±–∞ –∑–∞–ø–µ—á–µ–Ω–Ω–∞—è - 150–≥\n"
            f"- –û–≤–æ—â–∏ –Ω–∞ –ø–∞—Ä—É - 200–≥\n"
            f"- –°–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã - 50–≥\n\n"
            f"üçµ –ü–û–ó–î–ù–ò–ô –ü–ï–†–ï–ö–£–° (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏):\n"
            f"- –ö–µ—Ñ–∏—Ä 1% - 200–º–ª\n"
            f"- –ë–µ–ª–∫–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç - –Ω–∞ –≤—ã–±–æ—Ä\n\n"
            f"üíß –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–∏—Ç—å –≤–æ–¥—É - –Ω–µ –º–µ–Ω–µ–µ 30–º–ª –Ω–∞ 1–∫–≥ –≤–µ—Å–∞ —Ç–µ–ª–∞.\n\n"
            f"‚ö†Ô∏è –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è. –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±—É–¥–µ—Ç "
            f"–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
        )


class GPTMealPlanGenerator(MealPlanGenerator):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ OpenAI GPT."""
    
    def __init__(self, api_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è OpenAI
        """
        self.api_key = api_key
    
    async def generate_plan(self, client_data: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI GPT.
        
        Args:
            client_data: –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            str: –¢–µ–∫—Å—Ç –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
        """
        try:
            log_meal_plan(
                client_data['client_id'], 
                client_data['client_name'], 
                "–∑–∞–ø—Ä–æ—Å –∫ GPT", 
                f"–ö–ë–ñ–£: {client_data['calories']} –∫–∫–∞–ª"
            )
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI API
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            return await StubMealPlanGenerator().generate_plan(client_data)
        except Exception as e:
            log_error("meal_plan_service", "GPTMealPlanGenerator.generate_plan", e)
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è: {str(e)}")


class RAGMealPlanGenerator(MealPlanGenerator):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ RAG (Retrieval Augmented Generation)."""
    
    def __init__(self, api_key: Optional[str] = None, data_path: str = "data/nutrition"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è OpenAI
            data_path: –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º –¥–ª—è RAG-—Å–∏—Å—Ç–µ–º—ã
        """
        self.api_key = api_key
        self.data_path = data_path
    
    async def generate_plan(self, client_data: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG-—Å–∏—Å—Ç–µ–º—ã.
        
        Args:
            client_data: –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            str: –¢–µ–∫—Å—Ç –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
        """
        try:
            log_meal_plan(
                client_data['client_id'], 
                client_data['client_name'], 
                "–∑–∞–ø—Ä–æ—Å –∫ RAG", 
                f"–ö–ë–ñ–£: {client_data['calories']} –∫–∫–∞–ª"
            )
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAG-—Å–∏—Å—Ç–µ–º—ã
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            return await StubMealPlanGenerator().generate_plan(client_data)
        except Exception as e:
            log_error("meal_plan_service", "RAGMealPlanGenerator.generate_plan", e)
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è: {str(e)}")


async def generate_meal_plan(
        client_id: int,
        client_name: str,
        calories: int,
        protein: int,
        fat: int,
        carbs: int,
        goal: str,
        allergies: str = "",
        preferences: str = "",
        limitations: str = "",
        use_gpt: bool = False,
        use_rag: bool = False
    ) -> str:
    """
    –§–∞—Å–∞–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞.
    
    Args:
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        client_name: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
        calories: –ö–∞–ª–æ—Ä–∏–∏
        protein: –ë–µ–ª–∫–∏
        fat: –ñ–∏—Ä—ã
        carbs: –£–≥–ª–µ–≤–æ–¥—ã
        goal: –¶–µ–ª—å
        allergies: –ê–ª–ª–µ—Ä–≥–∏–∏
        preferences: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        limitations: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        use_gpt: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT
        use_rag: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RAG
        
    Returns:
        str: –¢–µ–∫—Å—Ç –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    """
    client_data = {
        'client_id': client_id,
        'client_name': client_name,
        'calories': calories,
        'protein': protein,
        'fat': fat,
        'carbs': carbs,
        'goal': goal,
        'allergies': allergies,
        'preferences': preferences,
        'limitations': limitations
    }
    
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if use_rag:
            generator = RAGMealPlanGenerator()
        elif use_gpt:
            generator = GPTMealPlanGenerator()
        else:
            generator = StubMealPlanGenerator()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
        plan = await generator.generate_plan(client_data)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        log_meal_plan(
            client_id, 
            client_name, 
            "—É—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", 
            f"–†–∞–∑–º–µ—Ä –ø–ª–∞–Ω–∞: {len(plan)} —Å–∏–º–≤–æ–ª–æ–≤"
        )
        
        return plan
    except Exception as e:
        log_error("meal_plan_service", "generate_meal_plan", e)
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è: {str(e)}")
